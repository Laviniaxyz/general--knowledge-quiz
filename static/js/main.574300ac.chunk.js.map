{"version":3,"sources":["components/ScreenComponent.js","components/store/actions/questionsActions.js","App.js","reportWebVitals.js","components/store/reducers/questionsReducers.js","index.js"],"names":["NEXT_QUESTION","nextQuestionReducer","state","action","type","question","ScreenComponent","props","useReducer","dispatch","console","log","useState","showScore","setShowScore","score","setScore","questions","length","className","sortedAnswers","answer","correct_answer","isCorrect","incorrect_answers","sort","map","response","index","onClick","LOAD_QUESTIONS","loadQuestions","payload","App","useDispatch","fetchQuestions","a","fetch","json","responseData","results","useSelector","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAGMA,G,MAAgB,iBAEhBC,EAAsB,SAACC,EAAOC,GAClC,OAAQA,EAAOC,MACb,KAAKJ,EACH,MAAO,CACLK,SAAUH,EAAMG,SAAU,GAE9B,QACE,OAAOH,IA2EEI,EAvES,SAACC,GAAW,IAAD,EACPC,qBAAWP,EAAqB,CACxDI,SAAU,IAFqB,mBAC1BH,EAD0B,KACnBO,EADmB,KAKjCC,QAAQC,IAAIT,EAAMG,SAAU,kBALK,MAQCO,oBAAS,GARV,mBAQ1BC,EAR0B,KAQfC,EARe,OASPF,mBAAS,GATF,mBAS1BG,EAT0B,KASnBC,EATmB,KAWjC,GAAIT,EAAMU,UAAUC,OAAS,EAC3B,OACE,qBAAKC,UAAU,WAIb,IAAD,EAQGC,EANW,CACjB,CAACC,OAAQd,EAAMU,UAAUf,EAAMG,UAAUiB,eAAgBC,WAAW,GACpE,CAACF,OAAQd,EAAMU,UAAUf,EAAMG,UAAUmB,kBAAkB,GAAID,WAAW,GAC1E,CAACF,OAAQd,EAAMU,UAAUf,EAAMG,UAAUmB,kBAAkB,GAAID,WAAW,GAC1E,CAACF,OAAQd,EAAMU,UAAUf,EAAMG,UAAUmB,kBAAkB,GAAID,WAAW,IAEzCE,OAiBnC,OACE,qBAAKN,UAAU,SAAf,SACA,qBAAKA,UAAU,WAAf,SACKN,EACG,sBAAKM,UAAU,WAAf,wBACaJ,EADb,2BAKL,gCACC,qBAAKI,UAAU,WAAf,SAA2BZ,EAAMU,UAAUf,EAAMG,UAAUA,WACzD,wBAAKc,WAAS,GAAd,0BAAyB,WAAzB,yBACGC,EAAcM,KAAI,SAACC,EAAUC,GAAX,OACjB,qBAAKT,UAAU,YAAwBU,QAAS,kBAzB3C,IAyBmEF,EAASJ,WAxBvFP,EAASD,EAAM,QAGIb,EAAMG,SACR,EAAIE,EAAMU,UAAUC,OACrCT,EAAS,CAACL,KAAMJ,IAEhBc,GAAa,KAiBP,SACE,wBAAOK,UAAU,QAAjB,UAA2BS,EAAM,EAAjC,KAAsCD,EAASN,WADjBO,OAFpC,YCrEGE,EAAiB,iBAEjBC,EAAgB,SAAAd,GAC3B,MAAO,CACLb,KAAM0B,EACNE,QAASf,I,OC+BEgB,EA5BH,WAGV,IAAMxB,EAAWyB,cAGXC,EAAc,uCAAG,8BAAAC,EAAA,sEACEC,MAAM,uEADR,cACfV,EADe,gBAEMA,EAASW,OAFf,OAEfC,EAFe,OAIrB9B,EAASsB,EAAcQ,EAAaC,UAJf,2CAAH,qDAOdvB,EAAYwB,aAAY,SAAAvC,GAAK,OAAIA,EAAMe,UAAUA,aASrD,OAPAyB,qBAAU,WACRP,MACC,IAMH,cAAC,EAAD,CAAiBlB,UAAWA,KCnBjB0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCJRQ,EAAe,CACnBnC,UAAW,IAWAoC,EAAcC,YAAgB,CACzCrC,UAT8B,WAAmC,IAAlCf,EAAiC,uDAAzBkD,EAAcjD,EAAW,uCAChE,OAAOA,EAAOC,MACZ,KAAK0B,EACH,OAAO,2BAAI5B,GAAX,IAAkBe,UAAWd,EAAO6B,UAExC,OAAO9B,KCHHqD,EAAQC,YAAYH,EACxBI,OAAOC,8BAAgCD,OAAOC,gCAGhDC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAMM,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.574300ac.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react'\r\nimport './ScreenComponent.css'\r\n\r\nconst NEXT_QUESTION = 'NEXT_QUESTION' \r\n\r\nconst nextQuestionReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case NEXT_QUESTION:\r\n      return {\r\n        question: state.question +1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst ScreenComponent = (props) => {\r\n  const [state, dispatch] = useReducer(nextQuestionReducer, {\r\n    question: 0\r\n  })\r\n\r\n  console.log(state.question, 'state question')\r\n\r\n  //const [currentQuestion, setCurrentQuestion] = useState(0)\r\n  const [showScore, setShowScore] = useState(false)\r\n  const [score, setScore] = useState(0)\r\n\r\n  if (props.questions.length < 1) {\r\n    return(\r\n      <div className='screen'>\r\n      </div>\r\n    )\r\n  } \r\n  else {\r\n  //Concat all answers in an array and them sort them\r\n  const allAnswers = [\r\n    {answer: props.questions[state.question].correct_answer, isCorrect: true},\r\n    {answer: props.questions[state.question].incorrect_answers[0], isCorrect: false},\r\n    {answer: props.questions[state.question].incorrect_answers[1], isCorrect: false},\r\n    {answer: props.questions[state.question].incorrect_answers[2], isCorrect: false}\r\n    ]\r\n    const sortedAnswers = allAnswers.sort()\r\n\r\n\r\n    //What happens after the user selects an answer\r\n    const inputClickHandler = (bool) => {\r\n      if (bool === true) {\r\n        setScore(score+1)\r\n      }\r\n\r\n      const nextQuestion = state.question  \r\n      if (nextQuestion + 1 < props.questions.length) {\r\n        dispatch({type: NEXT_QUESTION})\r\n      } else {\r\n        setShowScore(true)\r\n      }\r\n    }\r\n\r\n  return(\r\n    <div className='screen'>\r\n    <div className='quiz-box'>\r\n        {showScore?\r\n           (<div className='question'>\r\n             You scored {score} out of 10 questions!\r\n           </div>)\r\n        :\r\n       ( \r\n       <div>\r\n        <div className='question'>{props.questions[state.question].question}</div>\r\n          <div className className='answers'>\r\n            {sortedAnswers.map((response, index) => (\r\n              <div className='sg-answer' key={index} onClick={() => inputClickHandler(response.isCorrect)} >\r\n                <label className='label' >{index+1}. {response.answer}</label>\r\n              </div>\r\n              ))}\r\n          </div>\r\n        </div>)\r\n      }\r\n\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n}\r\n\r\n\r\n\r\nexport default ScreenComponent","export const LOAD_QUESTIONS = 'LOAD_QUESTIONS'\r\n\r\nexport const loadQuestions = questions => {\r\n  return {\r\n    type: LOAD_QUESTIONS,\r\n    payload: questions\r\n  }\r\n}","import React, {useState, useEffect} from 'react'\nimport './App.css'\nimport ScreenComponent from './components/ScreenComponent'\nimport {loadQuestions} from './components/store/actions/questionsActions'\nimport {useSelector, useDispatch} from 'react-redux'\n\n\n\nconst App = () => {\n  //const [questions, setQuestions] = useState([])\n\n  const dispatch = useDispatch()\n\n\n  const fetchQuestions = async() => {\n    const response = await fetch('https://opentdb.com/api.php?amount=10&difficulty=easy&type=multiple')\n    const responseData = await response.json()\n    //console.log(responseData.results)\n    dispatch(loadQuestions(responseData.results))\n  }\n\n  const questions = useSelector(state => state.questions.questions)\n\n    useEffect(() => {\n      fetchQuestions()\n    }, [])\n\n\n    \n\n    return (\n    <ScreenComponent questions={questions}/>\n    )\n  \n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from 'redux'\r\nimport {LOAD_QUESTIONS }from '../actions/questionsActions'\r\n\r\nconst initialState = {\r\n  questions: []\r\n}\r\n\r\nexport const questionsReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case LOAD_QUESTIONS:\r\n      return {...state, questions: action.payload}\r\n  }\r\n  return state\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  questions: questionsReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport {createStore, combineReducers} from 'redux'\nimport {rootReducer} from './components/store/reducers/questionsReducers'\n\nconst store = createStore(rootReducer, \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}